package main

import (
	"os"
	"flag"

	"io/ioutil"
	
	"text/template"
)

func failMaybe(err error) {
	if err != nil {
		println("Error: ", err.Error())
		
		os.Exit(1)
	}
}

var packageName = flag.String("package", "main", "The package to generate the code under.")

func main() {
	var data struct{
		InputFile string
		ResultName string
		PackageName string
		Data []byte
	}
	
	flag.Parse()

	data.InputFile = flag.Arg(0)
	data.ResultName = flag.Arg(1)
	data.PackageName = *packageName
	
	out, err := os.Create(data.InputFile + ".go")
	failMaybe(err)
	
	defer out.Close()

	inp, err := os.Open(data.InputFile)
	failMaybe(err)
	defer inp.Close()

	data.Data, err = ioutil.ReadAll(inp)
	failMaybe(err)
	
	t := template.Must(template.New("output").Parse(templ))
	failMaybe(t.Execute(out, data))

}


var templ = `package {{.PackageName}}
// Generated by embed-result-image -package {{.PackageName}} "{{.InputFile}}" {{.ResultName}}
// DO NOT EDIT.

import (
"bytes"

"image"
"image/png"
)

func init() {
  var err error

  {{.ResultName}}, err = png.Decode(bytes.NewBuffer({{.ResultName}}Bytes))
  if err != nil {
    panic(err)
  }
}

var {{.ResultName}} image.Image
var {{.ResultName}}Bytes = []byte{
{{ range $i := .Data }}{{ $i }}, {{end}}
};
`
